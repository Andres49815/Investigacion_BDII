@model CountriesApp.Models.Person

@{
    ViewBag.Title = "Edit";
}

<h2>Edit</h2>


@using (Html.BeginForm())
{
    Model.birthdate = Model.birthdate;
    
    <input type="submit" value="Aceptar" formaction="/Countries/Confirm_Edit" name="Confirm_Edit" />

    <div class="form-horizontal">
        <h4>Person</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.id)

        <div class="form-group">
            @Html.LabelFor(model => model.idNumber, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.idNumber, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.idNumber, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.firstName, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.firstName, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.firstName, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.lastName, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.lastName, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.lastName, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.birthCountry, "birthCountry", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("birthCountry", null, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.birthCountry, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.residenceCountry, "residenceCountry", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("residenceCountry", null, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.residenceCountry, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.birthdate, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.birthdate, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.birthdate, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.email, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.email, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.email, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.photo, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @{ var photo = Model.photo; }
                @if (photo != null)
                {
                    var base64 = Convert.ToBase64String(photo);
                    var imgsrc = string.Format("data:audio/mpeg;base64,{0}", base64);
                    <div class="col-md-6 col-xs-6">
                        <img src="@imgsrc" class="img-responsive" height="100" width="100" />
                    </div>
                }
                @using (Html.BeginForm("AddPhoto", "Countries", new { personId = Model.id }, FormMethod.Post, new { enctype = "multipart/form-data" }))
                {

                }
                @using (Html.BeginForm("AddPhoto", "Countries", new { personId = Model.id }, FormMethod.Post, new { enctype = "multipart/form-data" }))
                {
                    <fieldset>
                        <input type="file" name="test" />
                        <input type="submit" value="AddPhoto" class="btn btn-sm" />
                    </fieldset>
                }
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.interview, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @{ var interview = Model.interview; }
                @if (interview != null)
                {
                    var base64 = Convert.ToBase64String(Model.interview);
                    var soundsrc = string.Format("data:video/mp4;base64,{0}", base64);
                    <video controls="" autoplay="" preload="auto" name="media" id="player" class="col-md-12 col-xs-12" width="300" height="300">
                        <source src="@soundsrc" type="video/mp4">
                    </video>
                }
                @using (Html.BeginForm("AddInterview", "Countries", new { personId = Model.id }, FormMethod.Post, new { enctype = "multipart/form-data" }))
                {

                }
                @using (Html.BeginForm("AddInterview", "Countries", new { personId = Model.id }, FormMethod.Post, new { enctype = "multipart/form-data" }))
                {
                    <fieldset>
                        <input type="file" name="test" />
                        <input type="submit" value="Add interview" class="btn btn-sm" />
                    </fieldset>
                }
            </div>
        </div>
    </div>



}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
